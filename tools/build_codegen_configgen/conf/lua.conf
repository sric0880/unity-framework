namespace UF.Config;

struct ConfHero {
	int[] attack_sections;
	float[] attack_wait_time_min;
	float[] attack_wait_time_max;
	float attack_weight;
}

enum Modules {
	MODULES_1 = 1;
	MODULES_2 = 111;
	MODULES_3 = 111111;
	MODULES_4 = 12;
}

struct ConfTestEnum {
	int integer;
	int[] arrays;
	Modules[] modulesEnums;
}

struct ConfTestPrimitive {
	int mInt [Min, 19][Max, 59];
	float mFloat [Min, 0.9][Max, 10.9];
	double mDouble [Min, 0.1][Max, 0.99];
	byte mByte [Min, 0][Max, 0];
	short mShort [Require];
	long mLong [Require];
}

struct ConfTestArray1 {
	string address;
	int[] random_port;
}

struct ConfTestArray  {
	string name [RefID, "testStrDict"];
	int serverid;
	ConfTestArray1[] address_list [Require];
}

struct ConfTestStrings {
	string main_menu;
	string new_card [RefID, "testStrDict"];
}

struct ConfTestDict {
	int id [ID];
	string name;
	string desc;
	bool isMale;
}

struct ConfTestDict2 {
	string stringId [ID];
	int finish_dungeon_id;
}

struct ConfTestListAndDict {
	string[] stars [Require];
	dict<int, string> names [Require];
	int[] listofHeros;
	Modules module;
}


data Main{
	ConfTestEnum confenum [XlsxName, "TestEnums"];
	ConfTestPrimitive confprimitive;
	ConfTestArray[] server_list;
	ConfTestStrings strings;
	dict<int, ConfTestDict> testIntDict;
	dict<string, ConfTestDict2> testStrDict;
	dict<int, ConfHero> testHeroes [XlsxName, "HeroesDict"];
	ConfTestListAndDict[] listoflist;
	ConfTestListAndDict testlistAndDict;
	int[] testIntList;
	string[] testStrList;
	Modules[] testEnumList;
	float[] testFloatList;
}