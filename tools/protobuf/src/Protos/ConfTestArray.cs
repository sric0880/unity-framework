// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client/conf_test_array.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace UF.Config {

  /// <summary>Holder for reflection information generated from client/conf_test_array.proto</summary>
  public static partial class ConfTestArrayReflection {

    #region Descriptor
    /// <summary>File descriptor for client/conf_test_array.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfTestArrayReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxjbGllbnQvY29uZl90ZXN0X2FycmF5LnByb3RvEgZjbGllbnQaHWNsaWVu",
            "dC9jb25mX3Rlc3RfYXJyYXkxLnByb3RvIl0KDUNvbmZUZXN0QXJyYXkSDAoE",
            "bmFtZRgBIAEoCRIQCghzZXJ2ZXJpZBgCIAEoDRIsCgxhZGRyZXNzX2xpc3QY",
            "AyADKAsyFi5jbGllbnQuQ29uZlRlc3RBcnJheTFCDKoCCVVGLkNvbmZpZ2IG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::UF.Config.ConfTestArray1Reflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::UF.Config.ConfTestArray), global::UF.Config.ConfTestArray.Parser, new[]{ "Name", "Serverid", "AddressList" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ConfTestArray : pb::IMessage<ConfTestArray> {
    private static readonly pb::MessageParser<ConfTestArray> _parser = new pb::MessageParser<ConfTestArray>(() => new ConfTestArray());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfTestArray> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UF.Config.ConfTestArrayReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfTestArray() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfTestArray(ConfTestArray other) : this() {
      name_ = other.name_;
      serverid_ = other.serverid_;
      addressList_ = other.addressList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfTestArray Clone() {
      return new ConfTestArray(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serverid" field.</summary>
    public const int ServeridFieldNumber = 2;
    private uint serverid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Serverid {
      get { return serverid_; }
      set {
        serverid_ = value;
      }
    }

    /// <summary>Field number for the "address_list" field.</summary>
    public const int AddressListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::UF.Config.ConfTestArray1> _repeated_addressList_codec
        = pb::FieldCodec.ForMessage(26, global::UF.Config.ConfTestArray1.Parser);
    private readonly pbc::RepeatedField<global::UF.Config.ConfTestArray1> addressList_ = new pbc::RepeatedField<global::UF.Config.ConfTestArray1>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::UF.Config.ConfTestArray1> AddressList {
      get { return addressList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfTestArray);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfTestArray other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Serverid != other.Serverid) return false;
      if(!addressList_.Equals(other.addressList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Serverid != 0) hash ^= Serverid.GetHashCode();
      hash ^= addressList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Serverid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Serverid);
      }
      addressList_.WriteTo(output, _repeated_addressList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Serverid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Serverid);
      }
      size += addressList_.CalculateSize(_repeated_addressList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfTestArray other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Serverid != 0) {
        Serverid = other.Serverid;
      }
      addressList_.Add(other.addressList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Serverid = input.ReadUInt32();
            break;
          }
          case 26: {
            addressList_.AddEntriesFrom(input, _repeated_addressList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
