// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client/conf.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace UF.Config {

  /// <summary>Holder for reflection information generated from client/conf.proto</summary>
  public static partial class ConfReflection {

    #region Descriptor
    /// <summary>File descriptor for client/conf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFjbGllbnQvY29uZi5wcm90bxIGY2xpZW50Ghljb21tb24vZW51bV9tb2R1",
            "bGVzLnByb3RvGhtjbGllbnQvY29uZl90ZXN0X2VudW0ucHJvdG8aIGNsaWVu",
            "dC9jb25mX3Rlc3RfcHJpbWl0aXZlLnByb3RvGhxjbGllbnQvY29uZl90ZXN0",
            "X2FycmF5LnByb3RvGhtjbGllbnQvY29uZl90ZXN0X2RpY3QucHJvdG8aHGNs",
            "aWVudC9jb25mX3Rlc3RfZGljdDIucHJvdG8aFmNsaWVudC9jb25mX2hlcm8u",
            "cHJvdG8aJGNsaWVudC9jb25mX3Rlc3RfbGlzdF9hbmRfZGljdC5wcm90byLX",
            "BQoGQ29uZmlnEiYKCGNvbmZlbnVtGAEgASgLMhQuY2xpZW50LkNvbmZUZXN0",
            "RW51bRIwCg1jb25mcHJpbWl0aXZlGAIgASgLMhkuY2xpZW50LkNvbmZUZXN0",
            "UHJpbWl0aXZlEioKC3NlcnZlcl9saXN0GAMgAygLMhUuY2xpZW50LkNvbmZU",
            "ZXN0QXJyYXkSNAoLdGVzdEludERpY3QYByADKAsyHy5jbGllbnQuQ29uZmln",
            "LlRlc3RJbnREaWN0RW50cnkSNAoLdGVzdFN0ckRpY3QYCCADKAsyHy5jbGll",
            "bnQuQ29uZmlnLlRlc3RTdHJEaWN0RW50cnkSMgoKdGVzdEhlcm9lcxgJIAMo",
            "CzIeLmNsaWVudC5Db25maWcuVGVzdEhlcm9lc0VudHJ5Ei8KCmxpc3RvZmxp",
            "c3QYCiADKAsyGy5jbGllbnQuQ29uZlRlc3RMaXN0QW5kRGljdBI0Cg90ZXN0",
            "bGlzdEFuZERpY3QYCyABKAsyGy5jbGllbnQuQ29uZlRlc3RMaXN0QW5kRGlj",
            "dBITCgt0ZXN0SW50TGlzdBgMIAMoBRITCgt0ZXN0U3RyTGlzdBgNIAMoCRIl",
            "Cgx0ZXN0RW51bUxpc3QYDiADKA4yDy5jb21tb24uTW9kdWxlcxIVCg10ZXN0",
            "RmxvYXRMaXN0GA8gAygCGkgKEFRlc3RJbnREaWN0RW50cnkSCwoDa2V5GAEg",
            "ASgNEiMKBXZhbHVlGAIgASgLMhQuY2xpZW50LkNvbmZUZXN0RGljdDoCOAEa",
            "SQoQVGVzdFN0ckRpY3RFbnRyeRILCgNrZXkYASABKAkSJAoFdmFsdWUYAiAB",
            "KAsyFS5jbGllbnQuQ29uZlRlc3REaWN0MjoCOAEaQwoPVGVzdEhlcm9lc0Vu",
            "dHJ5EgsKA2tleRgBIAEoDRIfCgV2YWx1ZRgCIAEoCzIQLmNsaWVudC5Db25m",
            "SGVybzoCOAFCDKoCCVVGLkNvbmZpZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::UF.Config.EnumModulesReflection.Descriptor, global::UF.Config.ConfTestEnumReflection.Descriptor, global::UF.Config.ConfTestPrimitiveReflection.Descriptor, global::UF.Config.ConfTestArrayReflection.Descriptor, global::UF.Config.ConfTestDictReflection.Descriptor, global::UF.Config.ConfTestDict2Reflection.Descriptor, global::UF.Config.ConfHeroReflection.Descriptor, global::UF.Config.ConfTestListAndDictReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::UF.Config.Config), global::UF.Config.Config.Parser, new[]{ "Confenum", "Confprimitive", "ServerList", "TestIntDict", "TestStrDict", "TestHeroes", "Listoflist", "TestlistAndDict", "TestIntList", "TestStrList", "TestEnumList", "TestFloatList" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Config : pb::IMessage<Config> {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UF.Config.ConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      Confenum = other.confenum_ != null ? other.Confenum.Clone() : null;
      Confprimitive = other.confprimitive_ != null ? other.Confprimitive.Clone() : null;
      serverList_ = other.serverList_.Clone();
      testIntDict_ = other.testIntDict_.Clone();
      testStrDict_ = other.testStrDict_.Clone();
      testHeroes_ = other.testHeroes_.Clone();
      listoflist_ = other.listoflist_.Clone();
      TestlistAndDict = other.testlistAndDict_ != null ? other.TestlistAndDict.Clone() : null;
      testIntList_ = other.testIntList_.Clone();
      testStrList_ = other.testStrList_.Clone();
      testEnumList_ = other.testEnumList_.Clone();
      testFloatList_ = other.testFloatList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "confenum" field.</summary>
    public const int ConfenumFieldNumber = 1;
    private global::UF.Config.ConfTestEnum confenum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UF.Config.ConfTestEnum Confenum {
      get { return confenum_; }
      set {
        confenum_ = value;
      }
    }

    /// <summary>Field number for the "confprimitive" field.</summary>
    public const int ConfprimitiveFieldNumber = 2;
    private global::UF.Config.ConfTestPrimitive confprimitive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UF.Config.ConfTestPrimitive Confprimitive {
      get { return confprimitive_; }
      set {
        confprimitive_ = value;
      }
    }

    /// <summary>Field number for the "server_list" field.</summary>
    public const int ServerListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::UF.Config.ConfTestArray> _repeated_serverList_codec
        = pb::FieldCodec.ForMessage(26, global::UF.Config.ConfTestArray.Parser);
    private readonly pbc::RepeatedField<global::UF.Config.ConfTestArray> serverList_ = new pbc::RepeatedField<global::UF.Config.ConfTestArray>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::UF.Config.ConfTestArray> ServerList {
      get { return serverList_; }
    }

    /// <summary>Field number for the "testIntDict" field.</summary>
    public const int TestIntDictFieldNumber = 7;
    private static readonly pbc::MapField<uint, global::UF.Config.ConfTestDict>.Codec _map_testIntDict_codec
        = new pbc::MapField<uint, global::UF.Config.ConfTestDict>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForMessage(18, global::UF.Config.ConfTestDict.Parser), 58);
    private readonly pbc::MapField<uint, global::UF.Config.ConfTestDict> testIntDict_ = new pbc::MapField<uint, global::UF.Config.ConfTestDict>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::UF.Config.ConfTestDict> TestIntDict {
      get { return testIntDict_; }
    }

    /// <summary>Field number for the "testStrDict" field.</summary>
    public const int TestStrDictFieldNumber = 8;
    private static readonly pbc::MapField<string, global::UF.Config.ConfTestDict2>.Codec _map_testStrDict_codec
        = new pbc::MapField<string, global::UF.Config.ConfTestDict2>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::UF.Config.ConfTestDict2.Parser), 66);
    private readonly pbc::MapField<string, global::UF.Config.ConfTestDict2> testStrDict_ = new pbc::MapField<string, global::UF.Config.ConfTestDict2>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::UF.Config.ConfTestDict2> TestStrDict {
      get { return testStrDict_; }
    }

    /// <summary>Field number for the "testHeroes" field.</summary>
    public const int TestHeroesFieldNumber = 9;
    private static readonly pbc::MapField<uint, global::UF.Config.ConfHero>.Codec _map_testHeroes_codec
        = new pbc::MapField<uint, global::UF.Config.ConfHero>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForMessage(18, global::UF.Config.ConfHero.Parser), 74);
    private readonly pbc::MapField<uint, global::UF.Config.ConfHero> testHeroes_ = new pbc::MapField<uint, global::UF.Config.ConfHero>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::UF.Config.ConfHero> TestHeroes {
      get { return testHeroes_; }
    }

    /// <summary>Field number for the "listoflist" field.</summary>
    public const int ListoflistFieldNumber = 10;
    private static readonly pb::FieldCodec<global::UF.Config.ConfTestListAndDict> _repeated_listoflist_codec
        = pb::FieldCodec.ForMessage(82, global::UF.Config.ConfTestListAndDict.Parser);
    private readonly pbc::RepeatedField<global::UF.Config.ConfTestListAndDict> listoflist_ = new pbc::RepeatedField<global::UF.Config.ConfTestListAndDict>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::UF.Config.ConfTestListAndDict> Listoflist {
      get { return listoflist_; }
    }

    /// <summary>Field number for the "testlistAndDict" field.</summary>
    public const int TestlistAndDictFieldNumber = 11;
    private global::UF.Config.ConfTestListAndDict testlistAndDict_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UF.Config.ConfTestListAndDict TestlistAndDict {
      get { return testlistAndDict_; }
      set {
        testlistAndDict_ = value;
      }
    }

    /// <summary>Field number for the "testIntList" field.</summary>
    public const int TestIntListFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_testIntList_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> testIntList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TestIntList {
      get { return testIntList_; }
    }

    /// <summary>Field number for the "testStrList" field.</summary>
    public const int TestStrListFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _repeated_testStrList_codec
        = pb::FieldCodec.ForString(106);
    private readonly pbc::RepeatedField<string> testStrList_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TestStrList {
      get { return testStrList_; }
    }

    /// <summary>Field number for the "testEnumList" field.</summary>
    public const int TestEnumListFieldNumber = 14;
    private static readonly pb::FieldCodec<global::UF.Config.Modules> _repeated_testEnumList_codec
        = pb::FieldCodec.ForEnum(114, x => (int) x, x => (global::UF.Config.Modules) x);
    private readonly pbc::RepeatedField<global::UF.Config.Modules> testEnumList_ = new pbc::RepeatedField<global::UF.Config.Modules>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::UF.Config.Modules> TestEnumList {
      get { return testEnumList_; }
    }

    /// <summary>Field number for the "testFloatList" field.</summary>
    public const int TestFloatListFieldNumber = 15;
    private static readonly pb::FieldCodec<float> _repeated_testFloatList_codec
        = pb::FieldCodec.ForFloat(122);
    private readonly pbc::RepeatedField<float> testFloatList_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> TestFloatList {
      get { return testFloatList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Confenum, other.Confenum)) return false;
      if (!object.Equals(Confprimitive, other.Confprimitive)) return false;
      if(!serverList_.Equals(other.serverList_)) return false;
      if (!TestIntDict.Equals(other.TestIntDict)) return false;
      if (!TestStrDict.Equals(other.TestStrDict)) return false;
      if (!TestHeroes.Equals(other.TestHeroes)) return false;
      if(!listoflist_.Equals(other.listoflist_)) return false;
      if (!object.Equals(TestlistAndDict, other.TestlistAndDict)) return false;
      if(!testIntList_.Equals(other.testIntList_)) return false;
      if(!testStrList_.Equals(other.testStrList_)) return false;
      if(!testEnumList_.Equals(other.testEnumList_)) return false;
      if(!testFloatList_.Equals(other.testFloatList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (confenum_ != null) hash ^= Confenum.GetHashCode();
      if (confprimitive_ != null) hash ^= Confprimitive.GetHashCode();
      hash ^= serverList_.GetHashCode();
      hash ^= TestIntDict.GetHashCode();
      hash ^= TestStrDict.GetHashCode();
      hash ^= TestHeroes.GetHashCode();
      hash ^= listoflist_.GetHashCode();
      if (testlistAndDict_ != null) hash ^= TestlistAndDict.GetHashCode();
      hash ^= testIntList_.GetHashCode();
      hash ^= testStrList_.GetHashCode();
      hash ^= testEnumList_.GetHashCode();
      hash ^= testFloatList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (confenum_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Confenum);
      }
      if (confprimitive_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Confprimitive);
      }
      serverList_.WriteTo(output, _repeated_serverList_codec);
      testIntDict_.WriteTo(output, _map_testIntDict_codec);
      testStrDict_.WriteTo(output, _map_testStrDict_codec);
      testHeroes_.WriteTo(output, _map_testHeroes_codec);
      listoflist_.WriteTo(output, _repeated_listoflist_codec);
      if (testlistAndDict_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(TestlistAndDict);
      }
      testIntList_.WriteTo(output, _repeated_testIntList_codec);
      testStrList_.WriteTo(output, _repeated_testStrList_codec);
      testEnumList_.WriteTo(output, _repeated_testEnumList_codec);
      testFloatList_.WriteTo(output, _repeated_testFloatList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (confenum_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Confenum);
      }
      if (confprimitive_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Confprimitive);
      }
      size += serverList_.CalculateSize(_repeated_serverList_codec);
      size += testIntDict_.CalculateSize(_map_testIntDict_codec);
      size += testStrDict_.CalculateSize(_map_testStrDict_codec);
      size += testHeroes_.CalculateSize(_map_testHeroes_codec);
      size += listoflist_.CalculateSize(_repeated_listoflist_codec);
      if (testlistAndDict_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TestlistAndDict);
      }
      size += testIntList_.CalculateSize(_repeated_testIntList_codec);
      size += testStrList_.CalculateSize(_repeated_testStrList_codec);
      size += testEnumList_.CalculateSize(_repeated_testEnumList_codec);
      size += testFloatList_.CalculateSize(_repeated_testFloatList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      if (other.confenum_ != null) {
        if (confenum_ == null) {
          confenum_ = new global::UF.Config.ConfTestEnum();
        }
        Confenum.MergeFrom(other.Confenum);
      }
      if (other.confprimitive_ != null) {
        if (confprimitive_ == null) {
          confprimitive_ = new global::UF.Config.ConfTestPrimitive();
        }
        Confprimitive.MergeFrom(other.Confprimitive);
      }
      serverList_.Add(other.serverList_);
      testIntDict_.Add(other.testIntDict_);
      testStrDict_.Add(other.testStrDict_);
      testHeroes_.Add(other.testHeroes_);
      listoflist_.Add(other.listoflist_);
      if (other.testlistAndDict_ != null) {
        if (testlistAndDict_ == null) {
          testlistAndDict_ = new global::UF.Config.ConfTestListAndDict();
        }
        TestlistAndDict.MergeFrom(other.TestlistAndDict);
      }
      testIntList_.Add(other.testIntList_);
      testStrList_.Add(other.testStrList_);
      testEnumList_.Add(other.testEnumList_);
      testFloatList_.Add(other.testFloatList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (confenum_ == null) {
              confenum_ = new global::UF.Config.ConfTestEnum();
            }
            input.ReadMessage(confenum_);
            break;
          }
          case 18: {
            if (confprimitive_ == null) {
              confprimitive_ = new global::UF.Config.ConfTestPrimitive();
            }
            input.ReadMessage(confprimitive_);
            break;
          }
          case 26: {
            serverList_.AddEntriesFrom(input, _repeated_serverList_codec);
            break;
          }
          case 58: {
            testIntDict_.AddEntriesFrom(input, _map_testIntDict_codec);
            break;
          }
          case 66: {
            testStrDict_.AddEntriesFrom(input, _map_testStrDict_codec);
            break;
          }
          case 74: {
            testHeroes_.AddEntriesFrom(input, _map_testHeroes_codec);
            break;
          }
          case 82: {
            listoflist_.AddEntriesFrom(input, _repeated_listoflist_codec);
            break;
          }
          case 90: {
            if (testlistAndDict_ == null) {
              testlistAndDict_ = new global::UF.Config.ConfTestListAndDict();
            }
            input.ReadMessage(testlistAndDict_);
            break;
          }
          case 98:
          case 96: {
            testIntList_.AddEntriesFrom(input, _repeated_testIntList_codec);
            break;
          }
          case 106: {
            testStrList_.AddEntriesFrom(input, _repeated_testStrList_codec);
            break;
          }
          case 114:
          case 112: {
            testEnumList_.AddEntriesFrom(input, _repeated_testEnumList_codec);
            break;
          }
          case 122:
          case 125: {
            testFloatList_.AddEntriesFrom(input, _repeated_testFloatList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
