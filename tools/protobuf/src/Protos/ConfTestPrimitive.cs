// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client/conf_test_primitive.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace UF.Config {

  /// <summary>Holder for reflection information generated from client/conf_test_primitive.proto</summary>
  public static partial class ConfTestPrimitiveReflection {

    #region Descriptor
    /// <summary>File descriptor for client/conf_test_primitive.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfTestPrimitiveReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBjbGllbnQvY29uZl90ZXN0X3ByaW1pdGl2ZS5wcm90bxIGY2xpZW50Io0B",
            "ChFDb25mVGVzdFByaW1pdGl2ZRIMCgRtSW50GAEgASgFEg4KBm1GbG9hdBgC",
            "IAEoAhIPCgdtRG91YmxlGAMgASgBEg0KBW1Cb29sGAQgASgIEg0KBW1CeXRl",
            "GAUgASgFEg4KBm1TaG9ydBgGIAEoBRINCgVtTG9uZxgHIAEoAxIMCgRtU3Ry",
            "GAggASgJQgyqAglVRi5Db25maWdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::UF.Config.ConfTestPrimitive), global::UF.Config.ConfTestPrimitive.Parser, new[]{ "MInt", "MFloat", "MDouble", "MBool", "MByte", "MShort", "MLong", "MStr" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ConfTestPrimitive : pb::IMessage<ConfTestPrimitive> {
    private static readonly pb::MessageParser<ConfTestPrimitive> _parser = new pb::MessageParser<ConfTestPrimitive>(() => new ConfTestPrimitive());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfTestPrimitive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UF.Config.ConfTestPrimitiveReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfTestPrimitive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfTestPrimitive(ConfTestPrimitive other) : this() {
      mInt_ = other.mInt_;
      mFloat_ = other.mFloat_;
      mDouble_ = other.mDouble_;
      mBool_ = other.mBool_;
      mByte_ = other.mByte_;
      mShort_ = other.mShort_;
      mLong_ = other.mLong_;
      mStr_ = other.mStr_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfTestPrimitive Clone() {
      return new ConfTestPrimitive(this);
    }

    /// <summary>Field number for the "mInt" field.</summary>
    public const int MIntFieldNumber = 1;
    private int mInt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MInt {
      get { return mInt_; }
      set {
        mInt_ = value;
      }
    }

    /// <summary>Field number for the "mFloat" field.</summary>
    public const int MFloatFieldNumber = 2;
    private float mFloat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MFloat {
      get { return mFloat_; }
      set {
        mFloat_ = value;
      }
    }

    /// <summary>Field number for the "mDouble" field.</summary>
    public const int MDoubleFieldNumber = 3;
    private double mDouble_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MDouble {
      get { return mDouble_; }
      set {
        mDouble_ = value;
      }
    }

    /// <summary>Field number for the "mBool" field.</summary>
    public const int MBoolFieldNumber = 4;
    private bool mBool_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MBool {
      get { return mBool_; }
      set {
        mBool_ = value;
      }
    }

    /// <summary>Field number for the "mByte" field.</summary>
    public const int MByteFieldNumber = 5;
    private int mByte_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MByte {
      get { return mByte_; }
      set {
        mByte_ = value;
      }
    }

    /// <summary>Field number for the "mShort" field.</summary>
    public const int MShortFieldNumber = 6;
    private int mShort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MShort {
      get { return mShort_; }
      set {
        mShort_ = value;
      }
    }

    /// <summary>Field number for the "mLong" field.</summary>
    public const int MLongFieldNumber = 7;
    private long mLong_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MLong {
      get { return mLong_; }
      set {
        mLong_ = value;
      }
    }

    /// <summary>Field number for the "mStr" field.</summary>
    public const int MStrFieldNumber = 8;
    private string mStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MStr {
      get { return mStr_; }
      set {
        mStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfTestPrimitive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfTestPrimitive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MInt != other.MInt) return false;
      if (MFloat != other.MFloat) return false;
      if (MDouble != other.MDouble) return false;
      if (MBool != other.MBool) return false;
      if (MByte != other.MByte) return false;
      if (MShort != other.MShort) return false;
      if (MLong != other.MLong) return false;
      if (MStr != other.MStr) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MInt != 0) hash ^= MInt.GetHashCode();
      if (MFloat != 0F) hash ^= MFloat.GetHashCode();
      if (MDouble != 0D) hash ^= MDouble.GetHashCode();
      if (MBool != false) hash ^= MBool.GetHashCode();
      if (MByte != 0) hash ^= MByte.GetHashCode();
      if (MShort != 0) hash ^= MShort.GetHashCode();
      if (MLong != 0L) hash ^= MLong.GetHashCode();
      if (MStr.Length != 0) hash ^= MStr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MInt != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MInt);
      }
      if (MFloat != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MFloat);
      }
      if (MDouble != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MDouble);
      }
      if (MBool != false) {
        output.WriteRawTag(32);
        output.WriteBool(MBool);
      }
      if (MByte != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MByte);
      }
      if (MShort != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MShort);
      }
      if (MLong != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(MLong);
      }
      if (MStr.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(MStr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MInt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MInt);
      }
      if (MFloat != 0F) {
        size += 1 + 4;
      }
      if (MDouble != 0D) {
        size += 1 + 8;
      }
      if (MBool != false) {
        size += 1 + 1;
      }
      if (MByte != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MByte);
      }
      if (MShort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MShort);
      }
      if (MLong != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MLong);
      }
      if (MStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MStr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfTestPrimitive other) {
      if (other == null) {
        return;
      }
      if (other.MInt != 0) {
        MInt = other.MInt;
      }
      if (other.MFloat != 0F) {
        MFloat = other.MFloat;
      }
      if (other.MDouble != 0D) {
        MDouble = other.MDouble;
      }
      if (other.MBool != false) {
        MBool = other.MBool;
      }
      if (other.MByte != 0) {
        MByte = other.MByte;
      }
      if (other.MShort != 0) {
        MShort = other.MShort;
      }
      if (other.MLong != 0L) {
        MLong = other.MLong;
      }
      if (other.MStr.Length != 0) {
        MStr = other.MStr;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MInt = input.ReadInt32();
            break;
          }
          case 21: {
            MFloat = input.ReadFloat();
            break;
          }
          case 25: {
            MDouble = input.ReadDouble();
            break;
          }
          case 32: {
            MBool = input.ReadBool();
            break;
          }
          case 40: {
            MByte = input.ReadInt32();
            break;
          }
          case 48: {
            MShort = input.ReadInt32();
            break;
          }
          case 56: {
            MLong = input.ReadInt64();
            break;
          }
          case 66: {
            MStr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
